#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int *arr, int p, int q, int r)
{
	int i, j, k; 
	int* t;
	i = p; // 왼쪽 정렬의 시작 인덱스
	j = q + 1; // 왼쪽 정렬의 끝 인덱스 +1 = 오른쪽 정렬의 시작 인덱스

	t = (int*)malloc(sizeof(int) * (r - p + 1)); // r-p+1은 비교하는 배열의 길이 
	k = 0; 

	while (i<=q && j<=r) { //  왼쪽과 오른쪽 정렬 중 한쪽이 끝났을 경우에 탈출
		if (arr[i] < arr[j]) {
			t[k] = arr[i];
			i++;
		}
		else {
			t[k] = arr[j];
			j++;
		}
		k++;
	}
	
	
	if (i > q) { // i의 값이 t 배열에 다 정리된 후 j의 값의 남은 배열을 t배열에 다 넣어줌
				//왼쪽 정렬이 다 되었음 그러므로 오른쪽 정렬에 남은 값들 t 배열에 넣어줌
		for(; j<=r; j++,k++)
			t[k] = arr[j];
	}
	else {
		for (; i <= q; i++, k++)
			t[k] = arr[i];
	}

	for (i = p, k = 0; i <= r; i++, k++) { // 임시공간 t안에 있는 원소들을 원래공간으로 다시 옮겨주기
										  // i = p가 되는 이유는?  
		arr[i] = t[k];
		printf("%d ", arr[i]);
	}
	printf("\n");
	free(t);
}
void mergeSort(int *arr, int p, int r)
{
	int q; 

	if (p < r) { // 원소의 개수가 하나인 경우는 탈출
		q = (p + r) / 2;
		mergeSort(arr, p, q); // 왼쪽 정렬
		printf("p = %d, q = %d r = %d\n", p, q, r);
		mergeSort(arr, q + 1, r);  // 오른쪽 정렬
		printf("p = %d, q = %d r = %d\n", p, q, r);
		merge(arr, p, q, r); // 왼쪽 오른쪽 정렬되어있는 것들을 merge해줌
		printf("p = %d, q = %d r = %d\n", p, q, r);
	}
}

int main(void)
{
	int n, i;
	int *arr;
	
	scanf("%d", &n);
	arr = (int*)malloc(sizeof(int) * n);
	
	srand(time(NULL));	for (i = 0; i < n; i++) {
		arr[i] = rand() % 1000;
	}
	for (i = 0; i < n; i++) {
		printf("%4d ", arr[i]);
	}
	printf("\n");

	mergeSort(arr, 0, n - 1);

	for (i = 0; i < n; i++) {
		printf("%4d ", arr[i]);
	}
	printf("\n");

	free(arr);
	return 0;
}
