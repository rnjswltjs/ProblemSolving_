#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int partition(int* arr, int p, int r)
{
	int j, i, t;

	j = p;
	i = p - 1; // pivot보다 작은 숫자의 경계라서 초기화를 p-1로 해줌 

	for (; j < r; j++) { // 제일 끝에 있는 원소는 pivot이기에 비교할 필요없음 
		if (arr[j] < arr[r]) { // arr[r] = pivot 보다 작은 경우에만 자리 바꿈
			i++; // pivot보다 작은 숫자를 만날 경우에 오른쪽 경계를 하나 확장시켜줘야함
			t = arr[i];
			arr[i] = arr[j];
			arr[j] = t;
		}
	}
	i++;// pivot보다 작은 숫자의 오른쪽 경계선에 있기 때문에 +1해야 pivot의 위치

	// 제일 뒤에 있는 값과 pivot 숫자와 자리 변경
	t = arr[i];
	arr[i] = arr[r];
	arr[r] = t;
	return i;
}
void quickSort(int* arr, int p, int r, int k)
{
	int q;
	int num;

	if (p < r) {
		q = partition(arr, p, r);
		if (q - p + 1 == k) { // pivot와 k번째 인덱스와 일치
			num = arr[q];
			return;
		}
		else if(q - p + 1 > k) // K가 pivot 인덱스보다 작은 경우
			quickSort(arr, p, q - 1, k); 
		else // K가 pivot 인덱스보다 큰 경우
			quickSort(arr, q + 1, r, k - (q - p + 1)); 
	}
}

int main(void)
{
	int n, m, i;
	int* arr;

	printf("Enter the number of numbers: ");
	scanf("%d", &n);
	arr = (int*)malloc(sizeof(int) * n);

	printf("몇번째로 작은 수: ");
	scanf("%d", &m);
	
	srand(time(NULL));
	for (i = 0; i < n; i++) {
		arr[i] = rand() % 100;
	}
	for (i = 0; i < n; i++) {
		printf("%4d ", arr[i]);
	}
	printf("\n");

	quickSort(arr, 0, n - 1, m);

	printf("%d번째 작은 수는 %d\n", m, arr[m-1]);

	return 0;
}
